apply plugin: 'com.android.library'
apply from: "../maven.gradle"



def jarName = "analysys_core.jar"
android {
    lintOptions {
        abortOnError false
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        buildConfigField "String", "SDK_VERSION", "\"${version}\""
        minSdkVersion rootProject.ext.minSdkVersion
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), '../proguard-base.pro','proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.sourceJavaVersion
        targetCompatibility rootProject.ext.targetJavaVersion
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
/**
 * 生成未混淆的jar
 */
task buildPaasJar(type: Jar, dependsOn: ['assembleRelease']) {
    jarName
    from(rootProject.ext.buildClass)
    from fileTree(dir: 'src/main', includes: ['assets/**'])
    destinationDir = file('../release/')
    exclude('**/R.class')
    exclude('**/R\$*.class')
    manifest {
        attributes(
                'Implementation-Title': "${project.name}",
                'Implementation-Version': "${rootProject.ext.version}",
                'Built-Date': new Date().getDateTimeString(),
                'Built-With': "gradle-${project.getGradle().getGradleVersion()},groovy-${GroovySystem.getVersion()}",
                'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')')
    }
}



/**  生成混淆的jar */
def androidSDKDir = project.android.sdkDirectory.absolutePath
def androidJarDir = androidSDKDir.toString() + '/platforms/' + "${android.compileSdkVersion}" + '/android.jar'
task makePaasJar(type: proguard.gradle.ProGuardTask, dependsOn: ['buildPaasJar']) {

    doFirst {
        injars(rootProject.ext.release + jarName)
        outjars(rootProject.ext.paasName)
        configuration 'proguard-rules.pro'
        libraryjars androidJarDir
        dontshrink
    }
    doLast {
        rmJar(rootProject.ext.release + jarName)
    }
}


/** 删除为混淆文件 */
def rmJar(String filePath) {
    File file = new File(filePath)
    file.delete()
}

def moduleName = 'sdkDemo-plug-ins'
def projectName = 'analysys-android-paas'
def outer = '../'
def demoDirectory = outer + 'release/' + projectName
def zipName = 'analysys_paas_android_java_' + "${version}_${releaseTime()}"
/** 新建Setting文件,并写入demo名称  */
def writeFile(String moduleName, String projectName) {
    File fileOut = new File("${project.rootDir}" + '/release/' + projectName + '/settings.gradle');
    fileOut.withWriter('utf-8') {
        writer -> writer.writeLine("include ':${moduleName}'");
    }
    File fileOut2 = new File("${project.rootDir}" + '/release/' + projectName + '/config.gradle');
    fileOut2.withWriter('utf-8') {
        writer -> writer.writeLine("");
    }
}


/** 获取东八区时间 */
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC +8"))
}

/** 拷贝 生成demo  */
task makeModule(dependsOn: ['copyDemo', 'copyKey', 'copyGradle', 'copyConfig']) {
    doLast {
        writeFile(moduleName, projectName)
    }
}

task copyDemo(type: Copy) {
    from outer + moduleName
    into outer + '/release/' + projectName + '/' + moduleName
    exclude '*build', '*' + moduleName + '.iml'
}
task copyKey(type: Copy) {
    from outer + 'key/'
    into demoDirectory + '/key'
}
task copyGradle(type: Copy) {
    from outer + 'gradle'
    into demoDirectory + '/gradle'
}
task copyConfig(type: Copy) {
    from outer + 'gradlew'
    from outer + 'gradlew.bat'
    from outer + 'build.gradle'
    from outer + 'gradle.properties'
    from outer + 'local.properties'
    from outer + 'cinfig.gradle'
    into demoDirectory
}
// 打zip包
task makeZip(type: Zip, dependsOn: ['makeModule']) {
    from outer + 'release/'
    baseName = rootProject.ext.zipName
    destinationDir file('../zip/')
}

