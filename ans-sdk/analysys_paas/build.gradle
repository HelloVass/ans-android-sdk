rootProject.ext.gradle_base_sdk this

def jarName = "analysys_paas_sdk.jar"
def release = "${project.rootDir}" + '/release/'
def proguardJar = 'analysys_core_' + "${rootProject.ext.sdkVer}_${rootProject.ext.time}" + '.jar'

task buildPaasJar(type: Jar, dependsOn: ['build']) {
    archiveFileName = jarName
    from('build/intermediates/javac/release/classes')
    from fileTree(dir: 'src/main', includes: ['assets/**'])
    destinationDirectory = file(release)
    exclude('**/R.class')
    exclude('**/R\$*.class')
}
/**  生成混淆的jar */
def androidSDKDir = project.android.sdkDirectory.absolutePath
def androidJarDir = androidSDKDir.toString() + '/platforms/' + "${android.compileSdkVersion}" + '/android.jar'
task makePaasJar(type: proguard.gradle.ProGuardTask, dependsOn: 'buildPaasJar') {
    injars(release + jarName)
    outjars(release + proguardJar)
    configuration 'proguard-rules.pro'
    libraryjars(androidJarDir)
    dontshrink
    doLast {
        delete release + jarName
    }
}

def moduleName = 'apiDemo'
def projectName = 'analysys-android-paas'
def outer = "${project.rootDir}" + 'ans-demo/'
def demoDirectory = release + projectName
def zipName = 'analysys_paas_android_java_' + "${rootProject.ext.sdkVer}_${rootProject.ext.time}"

def writeFile(String moduleName, String projectName) {
    File fileOut = new File("${project.rootDir}" + '/release/' + projectName + '/settings.gradle');
    fileOut.withWriter('utf-8') {
        writer -> writer.writeLine("include ':${moduleName}'");
    }
    File fileOut2 = new File("${project.rootDir}" + '/release/' + projectName + '/config.gradle');
    fileOut2.withWriter('utf-8') {
        writer -> writer.writeLine("");
    }
}


/** 拷贝 生成demo  */
task makeModule(dependsOn: ['copyDemo', 'copyKey', 'copyGradle', 'copyConfig']) {
    doLast {
        writeFile(moduleName, projectName)
    }
}
def projectPath = "${project.rootDir}/"
def modulePath = projectPath + 'ans-demo/'
def demoProjectPath = projectPath + 'release/' + projectName
def demoModulePath = demoProjectPath + '/ans-demo/'

task copyDemo(type: Copy) {
    from modulePath + '/' + moduleName
    into projectPath + 'release/' + projectName + '/' + moduleName
    exclude '*build'
    exclude '*.iml'
}

task copyKey(type: Copy) {
    from projectPath + 'key/'
    into demoProjectPath + '/key'
}
task copyGradle(type: Copy) {
    from projectPath + 'gradle'
    into demoProjectPath + '/gradle'
}
task copyConfig(type: Copy) {
    from projectPath + 'gradlew'
    from projectPath + 'gradlew.bat'
    from projectPath + 'build.gradle'
    from projectPath + 'gradle.properties'
    from projectPath + 'local.properties'
    from projectPath + 'cinfig.gradle'
    into demoProjectPath
}
// 打zip包
task makeZip(type: Zip, dependsOn: ['makeModule']) {
    from projectPath + 'release/'
    baseName = 'analysys_paas_android_java_' + "${rootProject.ext.sdkVer}_${rootProject.ext.time}"
    destinationDir file(projectPath + 'zip/')
}




